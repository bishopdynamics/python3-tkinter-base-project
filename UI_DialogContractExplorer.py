# Form implementation generated from reading ui file 'DialogContractExplorer.ui'
#
# Created by: PyQt6 UI code generator 6.3.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

import tkinter
import tkinter.ttk

from Mod_Util import print_traceback


class DialogContractExplorerUI(object):
    def __init__(self):
        super().__init__()
        self.window = tkinter.Tk()
        self.window_title = 'Contract Explorer'
        self.window_width = 402
        self.window_height = 530
        self.window_width_min = 200
        self.window_height_min = 300
        startpoint_offset_x = 0
        startpoint_offset_y = 0
        self.startpoint_x = (self.window.winfo_screenwidth() / 2) - (self.window_width / 2) + startpoint_offset_x  # calculate a starting point, middle of screen
        self.startpoint_y = (self.window.winfo_screenheight() / 2) - (self.window_height / 2) + startpoint_offset_y
        self.max_int = 65536  # int used for max window dimensions
        self.default_pad = 5  # int used for padx and pady by default
        self.no_pad = 0  # int used when minimal to zero padding is desired
        # TODO is this the right way to expose these?
        self.button_expand = None
        self.button_close = None
        self.button_collapse = None
        self.treeview_result = None
        self.combobox_contracts = None

    def run_loop(self):
        # run the loop for this window
        self.window.mainloop()

    def setup_ui(self):
        # setup the UI here
        print("Setting up the Contract Explorer Dialog")
        try:
            # set the title
            self.window.title(self.window_title)
            # setup sizing of the main window
            self.window.minsize(width=self.window_width_min, height=self.window_height_min)
            self.window.maxsize(width=self.max_int, height=self.max_int)
            self.window.geometry('%dx%d+%d+%d' % (self.window_width, self.window_height, self.startpoint_x, self.startpoint_y))
            self.window.wm_resizable(True, True)  # make the window resizable
            # window is a 1x1 grid
            self.window.rowconfigure(0, weight=1)
            self.window.columnconfigure(0, weight=1)

            # now lets build out our frames
            # create the root frame with a vertical layout, 1 x 8 with the log at the bottom
            frame_root = tkinter.Frame(self.window)  # this is the overall window, the container of all containers
            frame_root.columnconfigure(0, weight=1)
            frame_root.rowconfigure(0)
            frame_root.rowconfigure(1, weight=1)

            frame_root.grid(column=0, row=0, sticky='nsew', padx=self.default_pad, pady=self.default_pad)

            # the top section, which has fixed height
            frame_top_section = tkinter.Frame(frame_root, height=200)
            frame_top_section.columnconfigure(0, weight=1)
            for i in range(0, 3):
                frame_top_section.rowconfigure(i, weight=1)
            frame_top_section.grid(column=0, row=0, sticky='ewn', padx=self.default_pad, pady=self.default_pad)

            # close button
            self.button_close = tkinter.Button(frame_top_section, text='Close')
            self.button_close.grid(column=0, row=0, sticky='ew', padx=self.default_pad, pady=self.default_pad)

            # this is the dropdown
            self.combobox_contracts = tkinter.ttk.Combobox(frame_top_section, state='readonly')
            self.combobox_contracts.grid(column=0, row=1, sticky='ew', padx=self.default_pad, pady=self.default_pad)

            # frame_buttons 2c x 1r holds the two buttons: expand and collapse
            frame_buttons = tkinter.Frame(frame_top_section)
            frame_buttons.columnconfigure(0, weight=1)
            frame_buttons.columnconfigure(1, weight=1)  # 2 cols
            frame_buttons.rowconfigure(0, weight=1)
            frame_buttons.grid(column=0, row=2, sticky='ew', padx=self.default_pad, pady=self.default_pad)  # position in parent frame

            # collapse button
            self.button_collapse = tkinter.Button(frame_buttons, text='Collapse All')
            self.button_collapse.grid(column=0, row=0, sticky='ew', padx=self.default_pad, pady=self.default_pad)

            # expand button
            self.button_expand = tkinter.Button(frame_buttons, text='Expand All')
            self.button_expand.grid(column=1, row=0, sticky='ew', padx=self.default_pad, pady=self.default_pad)

            # treeview
            self.treeview_result = tkinter.ttk.Treeview(frame_root)
            self.treeview_result.grid(column=0, row=1, sticky='ewsn', padx=(self.default_pad * 2), pady=(self.default_pad * 2))
            # TODO this works but i dont understand entirely why
            column_widths = [100, 300, 0]
            column_headings = ['Key', 'Value', '']
            column_ids = ['#0', 'key', 'value']
            self.treeview_result['columns'] = ['key', 'value']  # column ids (other than '#0')
            # iterate over column definitions
            for col_num in range(0, len(column_ids)):
                column_id = column_ids[col_num]
                self.treeview_result.heading(column_id, anchor='w', text=column_headings[col_num])
                self.treeview_result.column(column_id, width=column_widths[col_num])

        except Exception as ex:
            print('exception while building ui: %s' % ex)
            print_traceback()
